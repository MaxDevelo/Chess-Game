@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods


class App{

}

package Model{
    class Player{
    - _name: String
    - _canPlay: Boolean
    - _piecesCaptured: Piece[]
    - _pieceIsWhite: Boolean
    + setName(String name)
    + getName(): String
    + getColor(): Boolean
    + addPieceCaptured(piece: Piece);
    + isTurn(canPlay: Boolean)
    + getCanPlay(): Boolean
    }

    class Board{
    - _instance: Board {static}
    + getInstance(): Board
    + setSquare(square: Square, row: Integer, column: Integer)
    + getSquare(row: Integer, column: Integer): Square
    + getBoard: Square[]
    }

    class Square{
    - _row: Integer
    - _column: Integer
    + Square(row: Integer, column: Integer, piece: Piece)
    + getRow(): Integer
    + getColumn(): Integer
    + setPiece(piece: Piece)
    + getPiece() Piece
    }

    class PieceFactory{
    + PieceFactory()
    + createPawn(isWhite: Boolean): Pawn
    + createKing(isWhite: Boolean): King
    + createRook(isWhite: Boolean); Rook
    + createBishop(isWhite: Boolean): Bishop
    + createQueen(isWhite: Boolean): Queen
    + createKnight(isWhite: Boolean): Knight
    }

    abstract Piece{
    - _isWhite: Boolean
    - _canMove: Boolean
    + Piece(isWhite: Boolean)
    + getColor(): Boolean
    + moveAt(Square square, Board board)
    + getName(): String
    + getValidSquares(): Square[*]
    + setValidSquare(square: Square)
    + attackTo()
    }

    class Pawn{
    - _isPromoted: Boolean
    + isPromoted()
    }

    class King{
    - _isCaptured: Boolean
    + isCaptured(isCaptured: Boolean)
    + isCaptured(): Boolean
    }

    class Rook{
    }

    class Bishop{
    }

    class Queen{
    }

    class Knight{
    }

}

package View{
class StartGameView extends JFrame{

}
class  BoardView extends JFrame{
    - _panels: JPanel[]
    - pnl_board: JPanel
    - _instanceBoard: Board
    + BoardView()
    + generatedPiece()
    + reloadSquareColor()
    + movePiece(btnPiece: JButton)
}
class EndGameView extends JFrame{

}
}

package Controler{
    class Facade{
    + generatePiece(board: Square[]): Square[]
    }

    class Game{
    - _players: Player[]
    - _endGame: Boolean

    + setPlayer(Player player);
    + getPlayer(): Player
    + setEndGame(endGame: Boolean)
    + getEndGame(): Boolean
    }

}
App ..> BoardView : <<create>>
BoardView o--> "* \n -_validSquares" Square
Facade ..> PieceFactory : <<use>>
Facade ..> Square : <<use>>
Square o--> "* \n -_board" Piece
Board o--> "* \n -_board" Square
Piece o--> "* \n -_validSquares" Square
BoardView ..> Board : <<create>>
PieceFactory ...> Piece : <<use>>
Pawn -u-|> Piece
King -u-|> Piece
Rook -u-|> Piece
Bishop -u-|> Piece
Queen -u-|> Piece
Knight -u--|> Piece
PieceFactory ..> Pawn : <<use>>
PieceFactory ..> King : <<use>>
PieceFactory ..> Rook : <<use>>
PieceFactory ..> Bishop : <<use>>
PieceFactory ..> Queen : <<use>>
PieceFactory ..> Knight : <<use>>
Game ..> Player : <<use>>
Player o---> "0..16 \n -_piecesCaptured\n" Piece

@enduml