@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods


class App{

}

package Model{
    enum Color{
       BLACK,
       WHITE
    }
    class Player{
    - _name: String
    - _canPlay: Boolean
    - _pieceIsWhite: Boolean
    - _score: int
    + Player()
    + getScore(): int
    + setScore(score: int)
    + setName(String name)
    + getName(): String
    + getColor(): Boolean
    + addPieceCaptured(piece: Piece);
    + isTurn(canPlay: Boolean)
    + getCanPlay(): Boolean
    }

    class Square{
    - _row: Integer
    - _column: Integer
    + Square(row: Integer, column: Integer, piece: Piece)
    + getRow(): Integer
    + getColumn(): Integer
    + setPiece(piece: Piece)
    + getPiece() Piece
    }

    class PieceFactory{
    + PieceFactory()
    + createPawn(isWhite: Color): Pawn
    + createKing(color: Color): King
    + createRook(color: Color); Rook
    + createBishop(color: Color): Bishop
    + createQueen(color: Color): Queen
    + createKnight(color: Color): Knight
    }

    abstract Piece{
    + Piece(isWhite: Boolean)
    + getColor(): Color
    + {abstract}getName(): String
    + {abstract}canMove(square: Square, currentSquare: Square)
    }

    class Pawn{
    + Pawn(color: Color)
    + getName(): String
    + isPromoted()
    + canMove(square: Square, currentSquare: Square)
    }

    class King{
    + King(color: Color)
    + getName(): String
    + canMove(square: Square, currentSquare: Square)
    }

    class Rook{
    + Rook(color: Color)
    + getName(): String
    + canMove(square: Square, currentSquare: Square)
    }

    class Bishop{
    + Bishop(color: Color)
    + getName(): String
    + canMove(square: Square, currentSquare: Square)
    }

    class Queen{
    + Queen(color: Color)
    + getName(): String
    + canMove(square: Square, currentSquare: Square)
    }

    class Knight{
    + Knight(color: Color)
    + getName(): String
    + canMove(square: Square, currentSquare: Square)
    }

    class Board{
    + Board()
    + generatePiece(board: Square[]): Square[]
    + getValidSquares(): Square[*]
    + setSquare(square: Square, row: Integer, column: Integer)
    + getSquare(): Square
    + getSquare(row: Integer, column: Integer): Square
    + setValidSquares(square: Square)
    + moveAt(square: Square)
    + attack(square: Square)
    + setBoard(board: Square[*])
    + promotion(square: Square)
    }


    class Game{
    - _endGame: Boolean
    + Game()
    + setPlayer(Player player);
    + getPlayer(): Player
    + setEndGame(endGame: Boolean)
    + getEndGame(): Boolean
     }

}

package View{
class StartGameViewe{

}
class  BoardView{
    + BoardView()
    + generatedPiece()
    + reloadSquareColor()
    + movePiece()
}
class EndGameView{

}
}

App ..> BoardView : <<create>>
PieceFactory ..> Pawn : <<use>>
PieceFactory ..> King : <<use>>
PieceFactory ..> Rook : <<use>>
PieceFactory ..> Bishop : <<use>>
PieceFactory ..> Queen : <<use>>
PieceFactory ..> Knight : <<use>>
PieceFactory ...> Piece : <<use>>
Board ..> PieceFactory : <<use>>
Board ..> Square : <<use>>
Board o--> "64 \n -_board" Square
Pawn -u-|> Piece
King -u-|> Piece
Rook -u-|> Piece
Bishop -u-|> Piece
Queen -u-|> Piece
Knight -u--|> Piece
Game o---> "2 \n -_players\n" Player
Player o----> "0..16 \n -_piecesCaptured\n" Piece
Square o----> "0..1 \n -_piece\n" Piece
Piece o---> "1 \n -_color\n" Color
BoardView ..> Board : <<use>>
BoardView o----> "0..1 \n -_board\n" Board
Game ..> Board: <<use>>
@enduml