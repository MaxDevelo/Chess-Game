@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods


class App{

}


package Model{
    class Board{
    - board: Square[][]

    }

    class Square{
    - row: Integer
    - column: Integer
    - piece: Piece
    + Square(row: Integer, column: Integer, piece: Piece)
    + getRow(): Integer
    + getColumn(): Integer
    + setSquare(piece Piece)
    + getSquare() Piece
    }

    abstract Piece{
    - color: Boolean
    }

    class PieceFactory{
    + createPawn(): Pawn
    + createKing(): King
    + createRook(); Rook
    + createBishop(): Bishop
    + createQueen(): Queen
    + createKnight(): Knight
    }

    interface MovementStrategy{
    + move()
    }

    'class Model.Forward extends MovementStrategy{'
    '+ move()'
    '}'

    class Pawn{
    - color: Boolean
    + move()
    }

    class King{
    - color: Boolean
    + move()
    }

    class .Rook{
    - color: Boolean
    + move()
    }

    class Bishop{
    - color: Boolean
    + move()
    }

    class Queen{
    - color: Boolean
    + move()
    }

    class Knight{
    - color: Boolean
    + move()
    }
}

App ..> Model.PieceFactory : <<use>>
Model.Pawn ..|> Model.MovementStrategy
Model.King ..|> Model.MovementStrategy
Model.Rook ..|> Model.MovementStrategy
Model.Bishop ..|> Model.MovementStrategy
Model.Queen ..|> Model.MovementStrategy
Model.Knight ..|> Model.MovementStrategy
Model.PieceFactory ...> Model.Piece : <<use>>
Model.Pawn -u-|> Model.Piece
Model.King -u-|> Model.Piece
Model.Rook -u-|> Model.Piece
Model.Bishop -u-|> Model.Piece
Model.Queen -u-|> Model.Piece
Model.Knight -u-|> Model.Piece
Model.PieceFactory -u..> Model.Pawn : <<use>>
Model.PieceFactory -u..> Model.King : <<use>>
Model.PieceFactory -u..> Model.Rook : <<use>>
Model.PieceFactory -u..> Model.Bishop : <<use>>
Model.PieceFactory -u..> Model.Queen : <<use>>
Model.PieceFactory -u..> Model.Knight : <<use>>


@enduml