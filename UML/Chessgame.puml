@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods


class App{

}


package Model{
    class Board{
    - _board: Square[][]
    + setSquare(square: Square, row: Integer, column: Integer)
    + getSquare(row: Integer, column: Integer)
    }

    class Square{
    - _row: Integer
    - _column: Integer
    + Square(row: Integer, column: Integer, piece: Piece)
    + getRow(): Integer
    + getColumn(): Integer
    + setSquare(piece Piece)
    + getSquare() Piece
    }

    abstract Piece{
    - color: Boolean
    }

    class PieceFactory{
    + createPawn(): Pawn
    + createKing(): King
    + createRook(); Rook
    + createBishop(): Bishop
    + createQueen(): Queen
    + createKnight(): Knight
    }

    interface MovementStrategy{
    + move()
    }

    'class Model.Forward extends MovementStrategy{'
    '+ move()'
    '}'

    class Pawn{
    - color: Boolean
    + move()
    }

    class King{
    - color: Boolean
    + move()
    }

    class .Rook{
    - color: Boolean
    + move()
    }

    class Bishop{
    - color: Boolean
    + move()
    }

    class Queen{
    - color: Boolean
    + move()
    }

    class Knight{
    - color: Boolean
    + move()
    }
}

Square o--> "1 \n -_piece" Piece
App ..> PieceFactory : <<create>>
App ..> Board : <<create>>
Pawn ..|> MovementStrategy
King ..|> .MovementStrategy
Rook ..|> MovementStrategy
Bishop ..|> MovementStrategy
Queen ..|> MovementStrategy
Knight ..|> MovementStrategy
PieceFactory ...> Piece : <<use>>
Pawn -u-|> Piece
King -u-|> Piece
Rook -u-|> Piece
Bishop -u-|> Piece
Queen -u-|> Piece
Knight -u-|> Piece
PieceFactory -u..> Pawn : <<use>>
PieceFactory -u..> King : <<use>>
PieceFactory -u..> Rook : <<use>>
PieceFactory -u..> Bishop : <<use>>
PieceFactory -u..> Queen : <<use>>
PieceFactory -u..> Knight : <<use>>

@enduml