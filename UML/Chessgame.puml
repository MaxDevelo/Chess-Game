@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods


class App{

}

package Model{
    class Player{
    - _name: String
    - _canPlay: Boolean
    - _pieceIsWhite: Boolean
    + setName(String name)
    + getName(): String
    + getColor(): Boolean
    + addPieceCaptured(piece: Piece);
    + isTurn(canPlay: Boolean)
    + getCanPlay(): Boolean
    }

    class Board{
    - _instance: Board {static}
    + getInstance(): Board
    + getValidSquares(): Square[*]
    + setValidSquare(square: Square)
    + setSquare(square: Square, row: Integer, column: Integer)
    + getSquare(): Square
    + getSquare(row: Integer, column: Integer): Square
    + North(move: Integer): Square
    + South(move: Integer): Square
    + East(move: Integer): Square
    + West(move: Integer): Square
    + moveAt(square: Square)
    }

    class Square{
    - _row: Integer
    - _column: Integer
    + Square(row: Integer, column: Integer, piece: Piece)
    + getRow(): Integer
    + getColumn(): Integer
    + setPiece(piece: Piece)
    + getPiece() Piece
    }

    class PieceFactory{
    + PieceFactory()
    + createPawn(isWhite: Boolean): Pawn
    + createKing(isWhite: Boolean): King
    + createRook(isWhite: Boolean); Rook
    + createBishop(isWhite: Boolean): Bishop
    + createQueen(isWhite: Boolean): Queen
    + createKnight(isWhite: Boolean): Knight
    }

    abstract Piece{
    - _isWhite: Boolean
    - _canMove: Boolean
    + Piece(isWhite: Boolean)
    + getColor(): Boolean
    + getName(): String
    }

    class Pawn{
    + Bishop(isWhite: Boolean)
    + getName(): String
    - _isPromoted: Boolean
    + isPromoted()
    }

    class King{
    + Bishop(isWhite: Boolean)
    + getName(): String
    }

    class Rook{
    + Bishop(isWhite: Boolean)
    + getName(): String
    }

    class Bishop{
    + Bishop(isWhite: Boolean)
    + getName(): String
    }

    class Queen{
    + Bishop(isWhite: Boolean)
    + getName(): String
    }

    class Knight{
    + Bishop(isWhite: Boolean)
    + getName(): String
    }

}

package View{
class StartGameViewe{

}
class  BoardView{
    - _panels
    - pnl_board
    - _instanceBoard: Board
    + BoardView()
    + generatedPiece()
    + reloadSquareColor()
    + movePiece()
}
class EndGameView{

}
}

package Controler{
    class Facade{
    + generatePiece(board: Square[]): Square[]
    }

    class Game{
    - _endGame: Boolean
    + setPlayer(Player player);
    + getPlayer(): Player
    + setEndGame(endGame: Boolean)
    + getEndGame(): Boolean
    }

}
App ..> BoardView : <<create>>
Facade ..> PieceFactory : <<use>>
Facade ..> Square : <<use>>
Board o--> "64 \n -_board" Square
Pawn -u-|> Piece
King -u-|> Piece
Rook -u-|> Piece
Bishop -u-|> Piece
Queen -u-|> Piece
Knight -u--|> Piece
PieceFactory ..> Pawn : <<use>>
PieceFactory ..> King : <<use>>
PieceFactory ..> Rook : <<use>>
PieceFactory -u..> Bishop : <<use>>
PieceFactory -u..> Queen : <<use>>
PieceFactory ..> Knight : <<use>>
PieceFactory ...> Piece : <<use>>
Game o---> "2 \n -_players\n" Player
Player o----> "0..16 \n -_piecesCaptured\n" Piece

@enduml