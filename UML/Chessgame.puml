@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods


class App{

}


package Model{
    class Board{
    - _instance: Board {static}
    + getInstance(): Board
    + setSquare(square: Square, row: Integer, column: Integer)
    + getSquare(row: Integer, column: Integer): Square
    + getBoard: Square[]
    }

    class Square{
    - _row: Integer
    - _column: Integer
    + Square(row: Integer, column: Integer, piece: Piece)
    + getRow(): Integer
    + getColumn(): Integer
    + setPiece(piece: Piece)
    + getPiece() Piece
    }

    class PieceFactory{
    + createPawn(isWhite: Boolean): Pawn
    + createKing(isWhite: Boolean): King
    + createRook(isWhite: Boolean); Rook
    + createBishop(isWhite: Boolean): Bishop
    + createQueen(isWhite: Boolean): Queen
    + createKnight(isWhite: Boolean): Knight
    }

    abstract Piece{
    - _isWhite: Boolean
    - _canMove: Boolean
    + moveAt() 
    + getName(): String
    }

    class Pawn{
    +  Pawn(isWhite: Boolean)
    }

    class King{
     + King(isWhite: Boolean)
    }

    class Rook{
    + Rook(isWhite: Boolean)
    }

    class Bishop{
    + Bishop(isWhite: Boolean)
    }

    class Queen{
    + Queen(isWhite: Boolean)
    }

    class Knight{
    + Knight(isWhite: Boolean)
    }

}

package View{
class StartGameView extends JFrame{

}
class  BoardView extends JFrame{
    - panels: Board[]
    + BoardView()
    + generatedPiece()
}
class EndGameView extends JFrame{

}
}

Square o--> "1 \n -_piece" Piece
Board o--> "* \n -_board" Square
App ..> PieceFactory : <<create>>
App ..> Board : <<create>>
PieceFactory ...> Piece : <<use>>
Pawn -u-|> Piece
King -u-|> Piece
Rook -u-|> Piece
Bishop -u-|> Piece
Queen -u-|> Piece
Knight -u--|> Piece
PieceFactory ..> Pawn : <<use>>
PieceFactory ..> King : <<use>>
PieceFactory ..> Rook : <<use>>
PieceFactory ..> Bishop : <<use>>
PieceFactory ..> Queen : <<use>>
PieceFactory ..> Knight : <<use>>

@enduml