@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods
skinparam roundcorner 20
skinparam linetype polyline
skinparam linetype ortho
skinparam nodesep 100
skinparam ranksep 100



class App{
 +{static} main( args:String[] )
}

package Model{
    enum Color{
       BLACK,
       WHITE
    }
    enum Type{
       PAWN,
       BISHOP,
       QUEEN,
       KING,
       ROOK,
       KNIGHT
    }

    class Board{
    + Board()
    + generatePiece(board: Square[]): Square[]
    + getValidSquares(): Square[]
    + setSquare(square: Square, row: Integer, column: Integer)
    + getSquare(): Square
    + getSquare(row: Integer, column: Integer): Square
    + setValidSquares(square: Square)
    + getValidSquares(): Square[]
    + attack(square: Square)
    + setBoard(board: Square[*])
    + promotion(square: Square)
    + isPromoted(square: Square): Boolean
    + isCheck(): Boolean
    + squareForbidden(): Square[]
    + setLastPieceMove(lastPieceMove: Square)
    + canCastle(currentSquare: Square): Boolean
    + verifyLimitBoard(pos: Integer): Boolean
    + noMovePossible(): Boolean
    }


    class Game{
    - _isTurn: Boolean
    - _nullGame: Boolean
    - _endGame: Boolean
    + Game()
    + setPlayer(player: Player);
    + getPlayers(): Player[]
    + setEndGame(endGame: Boolean)
    + getEndGame(): Boolean
    + setPlayerPlay(currentPlayerPlay: Player)
    + getPlayerPlay(): Player
    + setNullGame(nullGame: Boolean)
    + getNullGame(): Boolean
     }
    class Player{
    - _name: String
    - _canPlay: Boolean
    - _colorPiece: Color
    - _score: Integer
    + Player()
    + getScore(): Integer
    + setScore(score: Integer)
    + setName(String name)
    + getType(): String
    + setColor(color: Color)
    + getColor(): Color
    + addPieceCaptured(piece: Piece);
    + isTurn(canPlay: Boolean)
    + getCanPlay(): Boolean
    }

    class Square{
    - _row: Integer
    - _column: Integer
    + Square(row: Integer, column: Integer, piece: Piece)
    + getRow(): Integer
    + getColumn(): Integer
    + setPiece(piece: Piece)
    + getPiece() Piece
    }

    class PieceFactory{
    + PieceFactory()
    + createPawn(isWhite: Color): Pawn
    + createKing(color: Color): King
    + createRook(color: Color); Rook
    + createBishop(color: Color): Bishop
    + createQueen(color: Color): Queen
    + createKnight(color: Color): Knight
    }

    abstract Piece{
    + Piece(isWhite: Color)
    + getColor(): Color
    + {abstract}getType(): Type
    + {abstract}canMove(square: Square, currentSquare: Square): Boolean
    + {abstract}up(square: Square, currentSquare: Square): boolean
    + {abstract}down(square: Square, currentSquare: Square): boolean
    + {abstract}left(square: Square, currentSquare: Square): boolean
    + {abstract}right(square: Square, currentSquare: Square): boolean
    + {abstract}getScore(): Integer
    + {abstract}isFirstMove(): Boolean
    + {abstract}setIsFirstMove(isFirstMove: Boolean)
    }

    class Pawn{
    + Pawn(color: Color)
    + getType(): String
    + getType(): Type
    + canMove(square: Square, currentSquare: Square): Boolean
    + up(square: Square, currentSquare: Square): boolean
    + down(square: Square, currentSquare: Square): boolean
    + left(square: Square, currentSquare: Square): boolean
    + right(square: Square, currentSquare: Square): boolean
    + getScore(): Integer
    + isFirstMove(): Boolean
    + setIsFirstMove(isFirstMove: Boolean)
    }

    class King{
    + King(color: Color)
    + getType(): Type
    + canMove(square: Square, currentSquare: Square): Boolean
    + up(square: Square, currentSquare: Square): boolean
    + down(square: Square, currentSquare: Square): boolean
    + left(square: Square, currentSquare: Square): boolean
    + right(square: Square, currentSquare: Square): boolean
    + getScore(): Integer
    + isFirstMove(): Boolean
    + setIsFirstMove(isFirstMove: Boolean)
    }

    class Rook{
    + Rook(color: Color)
    + getType(): Type
    + canMove(square: Square, currentSquare: Square): Boolean
    + up(square: Square, currentSquare: Square): boolean
    + down(square: Square, currentSquare: Square): boolean
    + left(square: Square, currentSquare: Square): boolean
    + right(square: Square, currentSquare: Square): boolean
    + getScore(): Integer
    + isFirstMove(): Boolean
    + setIsFirstMove(isFirstMove: Boolean)
    }

    class Bishop{
    + Bishop(color: Color)
    + getType(): Type
    + canMove(square: Square, currentSquare: Square): Boolean
    + up(square: Square, currentSquare: Square): boolean
    + down(square: Square, currentSquare: Square): boolean
    + left(square: Square, currentSquare: Square): boolean
    + right(square: Square, currentSquare: Square): boolean
    + getScore(): Integer
    + isFirstMove(): Boolean
    + setIsFirstMove(isFirstMove: Boolean)
    }

    class Queen{
    + Queen(color: Color)
    + getType(): Type
    + canMove(square: Square, currentSquare: Square): Boolean
    + up(square: Square, currentSquare: Square): boolean
    + down(square: Square, currentSquare: Square): boolean
    + left(square: Square, currentSquare: Square): boolean
    + right(square: Square, currentSquare: Square): boolean
    + getScore(): Integer
    + isFirstMove(): Boolean
    + setIsFirstMove(isFirstMove: Boolean)
    }

    class Knight{
    + Knight(color: Color)
    + getType(): Type
    + canMove(square: Square, currentSquare: Square): Boolean
    + up(square: Square, currentSquare: Square): boolean
    + down(square: Square, currentSquare: Square): boolean
    + left(square: Square, currentSquare: Square): boolean
    + right(square: Square, currentSquare: Square): boolean
    + getScore(): Integer
    + isFirstMove(): Boolean
    + setIsFirstMove(isFirstMove: Boolean)
    }

}

package Controller{

class ChessGameFacade{
    + Controller()
    + newGame()
    + generatedBoard()
    + moveAt(square: Square, pnlRow: Integer, pnlColumn: Integer)
    + turnGame(player1: Player, player2: Player)
    + updateScore(score: Integer)
    + verifyIfCheckMateKing()
    + verifyIfCheckKing()
    + isPat(): Boolean
}

}

package View{
class StartGameView{
    + StartGameView(facade: ChessGameFacade)
    + playGame()
}
class  BoardView{
    - _attack: Boolean
    + BoardView(facade: ChessGameFacade)
    + generatedPieceGUI()
    + reloadSquareColor()
    + piecesCapturedGUI()
    + createPieceGUI(l: Integer, c: Integer)
    + generatedBoardGUI()
    + selectPiecesPromotion()
    + movePieceGUI()
}
class EndGameView{
    + EndGameView(facade: ChessGameFacade)
    + displayScore()
}
}
BoardView -u..>  Type: <<use>>
StartGameView ..> BoardView: <<use>>
BoardView ..> EndGameView: <<use>>

StartGameView o---> "1 \n -_facade\n" ChessGameFacade: send >
BoardView o----> "1 \n -_facade\n" ChessGameFacade: Own >
EndGameView o---> "1 \n -_facade\n" ChessGameFacade: Own >

App ..> Controller : <<create>>
App ..> StartGameView : <<create>>

ChessGameFacade  "0..1 \n -_game\n" o---> Game: > Own
ChessGameFacade "0..1 \n -_board\n" o-->  Board: > Own

Rook o-->  "0..64 \n -_knownSquare\n"  Square: > Know
Bishop o--> "0..64 \n -_knownSquare\n"   Square: > Know
Queen o--> "0..64\n -_knownSquare\n"   Square: > Know


PieceFactory ....> Pawn : <<use>>
PieceFactory .....> King : <<use>>
PieceFactory ....> Rook : <<use>>
PieceFactory ...> Bishop : <<use>>
PieceFactory ...> Queen : <<use>>
PieceFactory ...> Knight : <<use>>
PieceFactory ....> Piece : <<use>>

PieceFactory ..> Pawn : <<use>>

Board ..> PieceFactory : <<use>>

Board *--> "64 \n -_boardSquare" Square: < Compose
Pawn -u--|> Piece
King -u--|> Piece
Rook -u--|> Piece
Bishop -u--|> Piece
Queen -u--|> Piece
Knight -u--|> Piece

Piece ..>  Type: <<use>>
Controller ..>  Type: <<use>>


Piece o--> "1 \n -_color\n" Color: Own
Player o-u-> "0..1 \n -_colorPiece\n" Color: > Own

Game *-->  "2 \n -_players\n"  Player:  Compose <
Player  "0..16 \n -_piecesCaptured\n" o--> Piece: > show
Square o--> "1 \n -_piece\n" Piece: > Owns
BoardView o--> "0..1 \n -_board\n" Board: show >
Game ..> Board: <<use>>
@enduml